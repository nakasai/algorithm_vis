import React, { useState, useEffect } from 'react';
import { Button } from "../components/ui/button";

// ナップサック問題のアイテムの型
interface Item {
  name: string;
  weight: number;
  value: number;
}

const KnapsackVisualizer: React.FC = () => {
  // 初期データ
  const defaultItems: Item[] = [
    { name: '金の指輪', weight: 4, value: 6 },
    { name: 'ダイヤの指輪', weight: 5, value: 8 },
    { name: '銀の指輪', weight: 2, value: 3 },
  ];
  
  // 状態管理
  const [items, setItems] = useState<Item[]>([...defaultItems]);
  const [maxWeight, setMaxWeight] = useState(7);
  const [dpTable, setDpTable] = useState<number[][]>([]);
  const [step, setStep] = useState(0);
  const [selectedItems, setSelectedItems] = useState<Item[]>([]);
  const [currentI, setCurrentI] = useState(0);
  const [currentW, setCurrentW] = useState(0);
  const [isComplete, setIsComplete] = useState(false);
  const [isPlaying, setIsPlaying] = useState(false);
  const [showCode, setShowCode] = useState(true);
  
  // 計算用の定数
  const N = items ? items.length : 0;
  const W = maxWeight || 1;
  const totalSteps = N * (W + 1);
  
  // 初期化
  useEffect(() => {
    initializeDP();
  }, [items, maxWeight]);
  
  // 自動再生制御
  useEffect(() => {
    if (isPlaying && !isComplete) {
      const timer = setTimeout(() => {
        if (step < totalSteps) {
          setStep(prevStep => prevStep + 1);
        } else {
          setIsPlaying(false);
        }
      }, 1000);
      return () => clearTimeout(timer);
    }
  }, [isPlaying, step, totalSteps, isComplete]);
  
  // ステップ変更時の処理
  useEffect(() => {
    if (step >= totalSteps) {
      // 計算完了処理
      const finalDpTable = Array(N + 1).fill(null).map(() => Array(W + 1).fill(0));
      
      for (let i = 0; i < N; i++) {
        for (let w = 0; w <= W; w++) {
          const item = items[i];
          
          // 選ぶ場合（重さが許す場合）
          if (w - item.weight >= 0) {
            finalDpTable[i + 1][w] = Math.max(
              finalDpTable[i + 1][w],
              finalDpTable[i][w - item.weight] + item.value
            );
          }
          
          // 選ばない場合
          finalDpTable[i + 1][w] = Math.max(finalDpTable[i + 1][w], finalDpTable[i][w]);
        }
      }
      
      setDpTable(finalDpTable);
      
      // 選択アイテムの特定
      let remainingWeight = W;
      const selected: Item[] = [];
      
      for (let i = N; i > 0; i--) {
        if (finalDpTable[i][remainingWeight] !== finalDpTable[i-1][remainingWeight]) {
          selected.push(items[i-1]);
          remainingWeight -= items[i-1].weight;
        }
      }
      
      setSelectedItems(selected);
      setIsComplete(true);
      setIsPlaying(false);
    } else {
      // ステップごとの計算
      const i = Math.floor(step / (W + 1));
      const w = step % (W + 1);
      
      setCurrentI(i);
      setCurrentW(w);
      
      // DPテーブルの計算
      const newDpTable = Array(N + 1).fill(null).map(() => Array(W + 1).fill(0));
      
      for (let s = 0; s <= step; s++) {
        const si = Math.floor(s / (W + 1));
        const sw = s % (W + 1);
        
        if (si < N) {
          const item = items[si];
          
          // 選ぶ場合（重さが許す場合）
          if (sw - item.weight >= 0) {
            newDpTable[si + 1][sw] = Math.max(
              newDpTable[si + 1][sw],
              newDpTable[si][sw - item.weight] + item.value
            );
          }
          
          // 選ばない場合
          newDpTable[si + 1][sw] = Math.max(newDpTable[si + 1][sw], newDpTable[si][sw]);
        }
      }
      
      setDpTable(newDpTable);
    }
  }, [step, items, N, W, totalSteps]);
  
  // DPテーブルの初期化
  const initializeDP = () => {
    const newDpTable = Array(N + 1).fill(null).map(() => Array(W + 1).fill(0));
    setDpTable(newDpTable);
    setSelectedItems([]);
    setCurrentI(0);
    setCurrentW(0);
    setIsComplete(false);
    setStep(0);
    setIsPlaying(false);
  };
  
  // 可視化のリセット
  const resetVisualization = () => {
    initializeDP();
  };
  
  // 現在のステップの説明
  const getCurrentStepDescription = () => {
    if (isComplete) {
      return "計算完了！最適解が見つかりました。";
    }
    
    if (step === 0) {
      return "スタート: 「再生」ボタンを押すと計算が始まります。";
    }
    
    const item = items[currentI];
    return `ステップ ${step}/${totalSteps}: アイテム「${item.name}」を重さ ${currentW} で検討中`;
  };
  
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold text-center mb-6">
        ナップサック問題の動的計画法可視化
      </h1>
      
      <div className="mb-4 p-4 bg-blue-50 border border-blue-200 rounded-md">
        <h2 className="text-lg font-semibold text-blue-700">ナップサック問題とは</h2>
        <p className="mt-1">
          限られた容量の「ナップサック」に価値と重さを持つ品物を詰め込み、価値の合計を最大化する問題です。
          この可視化では、動的計画法（DP）によって解を求めるプロセスを段階的に確認できます。
        </p>
      </div>
      
      {/* コントロールパネル */}
      <div className="mb-6 p-4 bg-white rounded-md shadow">
        <div className="flex flex-wrap gap-2 mb-4">
          <Button 
            onClick={() => setIsPlaying(!isPlaying)}
            disabled={isComplete || step >= totalSteps}
            variant={isPlaying ? "destructive" : "default"}
          >
            {isPlaying ? "一時停止" : "再生"}
          </Button>
          
          <Button
            variant="outline"
            onClick={() => step > 0 && setStep(step - 1)}
            disabled={step <= 0 || isPlaying}
          >
            前へ
          </Button>
          
          <Button
            variant="outline"
            onClick={() => step < totalSteps && setStep(step + 1)}
            disabled={step >= totalSteps || isPlaying}
          >
            次へ
          </Button>
          
          <Button
            onClick={() => setStep(totalSteps)}
            disabled={isComplete || step >= totalSteps || isPlaying}
          >
            計算完了
          </Button>
          
          <Button
            variant="outline"
            onClick={resetVisualization}
          >
            リセット
          </Button>
        </div>
        
        <div className="p-3 bg-gray-50 rounded-md">
          {getCurrentStepDescription()}
        </div>
      </div>
      
      {/* DPテーブル */}
      <div className="mb-6 p-4 bg-white rounded-md shadow">
        <h2 className="text-xl font-semibold mb-2">動的計画法テーブル</h2>
        <p className="mb-2 text-sm text-gray-600">各セルの値は、その時点での最大価値を表します</p>
        
        <div className="overflow-x-auto">
          <table className="w-full border-collapse">
            <thead>
              <tr>
                <th className="border bg-gray-50 px-3 py-2 text-sm">アイテム＼容量</th>
                {Array(W + 1).fill(0).map((_, w) => (
                  <th 
                    key={`header-${w}`} 
                    className={`border px-3 py-2 text-sm ${currentW === w && !isComplete ? 'bg-blue-100' : 'bg-gray-50'}`}
                  >
                    {w}
                  </th>
                ))}
              </tr>
            </thead>
            <tbody>
              {dpTable.map((row, i) => (
                <tr key={`row-${i}`}>
                  <td className={`border bg-gray-50 px-3 py-2 text-sm ${currentI === i - 1 && !isComplete ? 'bg-blue-100 font-medium' : ''}`}>
                    {i === 0 ? '初期値' : items[i-1]?.name || `アイテム${i}`}
                  </td>
                  {row.map((cell, j) => (
                    <td 
                      key={`cell-${i}-${j}`}
                      className={`border px-3 py-2 text-center ${
                        currentI === i - 1 && currentW === j && !isComplete
                          ? 'bg-yellow-100 font-bold'
                          : i > 0 && dpTable[i][j] > dpTable[i-1][j]
                          ? 'bg-green-50'
                          : ''
                      }`}
                    >
                      {cell}
                    </td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
      
      {/* 疑似コード */}
      {showCode && (
        <div className="mb-6 p-4 bg-white rounded-md shadow">
          <div className="flex justify-between items-center mb-2">
            <h2 className="text-xl font-semibold">動的計画法のアルゴリズム</h2>
            <Button 
              variant="outline" 
              size="sm"
              onClick={() => setShowCode(!showCode)}
            >
              {showCode ? "コードを隠す" : "コードを表示"}
            </Button>
          </div>
          
          <pre className="bg-gray-50 p-4 rounded-md text-sm overflow-x-auto">
            <code>{`function knapsack(items, maxWeight) {
  // N: アイテム数, W: 最大重量
  const N = items.length;
  const W = maxWeight;
  
  // dp[i][w]: i番目のアイテムまで考慮し、
  // 重さの合計がwを超えない場合の最大価値
  const dp = Array(N + 1).fill().map(() => Array(W + 1).fill(0));
  
  // 動的計画法の実行
  for (let i = 0; i < N; i++) {
    const item = items[i];
    
    for (let w = 0; w <= W; w++) {
      // アイテムを選ぶ場合（重さが許す場合）
      if (w - item.weight >= 0) {
        dp[i + 1][w] = Math.max(
          dp[i + 1][w], 
          dp[i][w - item.weight] + item.value
        );
      }
      
      // アイテムを選ばない場合
      dp[i + 1][w] = Math.max(dp[i + 1][w], dp[i][w]);
    }
  }
  
  return { maxValue: dp[N][W], selectedItems: [] };
}`}</code>
          </pre>
        </div>
      )}
      
      {/* アイテムと結果 */}
      <div className="p-4 bg-white rounded-md shadow">
        <div className="mb-4">
          <h2 className="text-xl font-semibold mb-2">アイテム一覧</h2>
          <div className="mb-3">
            <label className="block mb-1">最大重量: {maxWeight}</label>
            <input 
              type="range" 
              min="1" 
              max="15" 
              value={maxWeight} 
              onChange={(e) => setMaxWeight(parseInt(e.target.value))}
              className="w-full" 
              disabled={isPlaying}
            />
          </div>
          
          <div className="space-y-2">
            {items.map((item, index) => (
              <div 
                key={index}
                className="p-3 border rounded-md"
              >
                <div className="font-medium">{item.name}</div>
                <div className="text-sm text-gray-600">
                  重さ: {item.weight}, 価値: {item.value}
                </div>
              </div>
            ))}
          </div>
        </div>
        
        {isComplete && (
          <div className="mt-6 p-4 bg-green-50 rounded-md">
            <h2 className="text-xl font-semibold text-green-700 mb-2">計算結果</h2>
            <div className="mb-2">
              <div className="text-lg font-bold">最大価値: {dpTable[N][W]}</div>
              <div className="text-sm">使用重量: {selectedItems.reduce((sum, item) => sum + item.weight, 0)} / {maxWeight}</div>
            </div>
            
            <h3 className="font-medium mb-1">選択されたアイテム:</h3>
            <ul className="list-disc pl-5">
              {selectedItems.map((item, idx) => (
                <li key={idx}>
                  {item.name} (価値: {item.value}, 重さ: {item.weight})
                </li>
              ))}
            </ul>
          </div>
        )}
      </div>
    </div>
  );
};

export default KnapsackVisualizer;
